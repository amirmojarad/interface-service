// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"interface_project/ent/movie"
	"interface_project/ent/user"
	"interface_project/ent/word"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Word is the model entity for the Word schema.
type Word struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Meaning holds the value of the "meaning" field.
	Meaning string `json:"meaning,omitempty"`
	// Sentence holds the value of the "sentence" field.
	Sentence string `json:"sentence,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration string `json:"duration,omitempty"`
	// Start holds the value of the "start" field.
	Start time.Time `json:"start,omitempty"`
	// End holds the value of the "end" field.
	End time.Time `json:"end,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WordQuery when eager-loading is set.
	Edges               WordEdges `json:"edges"`
	user_favorite_words *int
	word_movie          *int
	word_node_words     *int
}

// WordEdges holds the relations/edges for other nodes in the graph.
type WordEdges struct {
	// Movie holds the value of the movie edge.
	Movie *Movie `json:"movie,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MovieOrErr returns the Movie value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WordEdges) MovieOrErr() (*Movie, error) {
	if e.loadedTypes[0] {
		if e.Movie == nil {
			// The edge movie was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: movie.Label}
		}
		return e.Movie, nil
	}
	return nil, &NotLoadedError{edge: "movie"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Word) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case word.FieldID:
			values[i] = new(sql.NullInt64)
		case word.FieldTitle, word.FieldMeaning, word.FieldSentence, word.FieldDuration:
			values[i] = new(sql.NullString)
		case word.FieldStart, word.FieldEnd:
			values[i] = new(sql.NullTime)
		case word.ForeignKeys[0]: // user_favorite_words
			values[i] = new(sql.NullInt64)
		case word.ForeignKeys[1]: // word_movie
			values[i] = new(sql.NullInt64)
		case word.ForeignKeys[2]: // word_node_words
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Word", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Word fields.
func (w *Word) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case word.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case word.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				w.Title = value.String
			}
		case word.FieldMeaning:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meaning", values[i])
			} else if value.Valid {
				w.Meaning = value.String
			}
		case word.FieldSentence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sentence", values[i])
			} else if value.Valid {
				w.Sentence = value.String
			}
		case word.FieldDuration:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				w.Duration = value.String
			}
		case word.FieldStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				w.Start = value.Time
			}
		case word.FieldEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				w.End = value.Time
			}
		case word.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_favorite_words", value)
			} else if value.Valid {
				w.user_favorite_words = new(int)
				*w.user_favorite_words = int(value.Int64)
			}
		case word.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field word_movie", value)
			} else if value.Valid {
				w.word_movie = new(int)
				*w.word_movie = int(value.Int64)
			}
		case word.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field word_node_words", value)
			} else if value.Valid {
				w.word_node_words = new(int)
				*w.word_node_words = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMovie queries the "movie" edge of the Word entity.
func (w *Word) QueryMovie() *MovieQuery {
	return (&WordClient{config: w.config}).QueryMovie(w)
}

// QueryUser queries the "user" edge of the Word entity.
func (w *Word) QueryUser() *UserQuery {
	return (&WordClient{config: w.config}).QueryUser(w)
}

// Update returns a builder for updating this Word.
// Note that you need to call Word.Unwrap() before calling this method if this Word
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Word) Update() *WordUpdateOne {
	return (&WordClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Word entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Word) Unwrap() *Word {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Word is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Word) String() string {
	var builder strings.Builder
	builder.WriteString("Word(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", title=")
	builder.WriteString(w.Title)
	builder.WriteString(", meaning=")
	builder.WriteString(w.Meaning)
	builder.WriteString(", sentence=")
	builder.WriteString(w.Sentence)
	builder.WriteString(", duration=")
	builder.WriteString(w.Duration)
	builder.WriteString(", start=")
	builder.WriteString(w.Start.Format(time.ANSIC))
	builder.WriteString(", end=")
	builder.WriteString(w.End.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Words is a parsable slice of Word.
type Words []*Word

func (w Words) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
