// Code generated by entc, DO NOT EDIT.

package word

const (
	// Label holds the string label denoting the word type in the database.
	Label = "word"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldMeaning holds the string denoting the meaning field in the database.
	FieldMeaning = "meaning"
	// FieldIsPreposition holds the string denoting the ispreposition field in the database.
	FieldIsPreposition = "is_preposition"
	// FieldSentence holds the string denoting the sentence field in the database.
	FieldSentence = "sentence"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// EdgeCollection holds the string denoting the collection edge name in mutations.
	EdgeCollection = "collection"
	// Table holds the table name of the word in the database.
	Table = "words"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "words"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_favorite_words"
	// FileTable is the table that holds the file relation/edge.
	FileTable = "words"
	// FileInverseTable is the table name for the FileEntity entity.
	// It exists in this package in order to avoid circular dependency with the "fileentity" package.
	FileInverseTable = "file_entities"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "file_entity_words"
	// CollectionTable is the table that holds the collection relation/edge. The primary key declared below.
	CollectionTable = "collection_collection_words"
	// CollectionInverseTable is the table name for the Collection entity.
	// It exists in this package in order to avoid circular dependency with the "collection" package.
	CollectionInverseTable = "collections"
)

// Columns holds all SQL columns for word fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldMeaning,
	FieldIsPreposition,
	FieldSentence,
	FieldDuration,
	FieldStart,
	FieldEnd,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "words"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"file_entity_words",
	"user_favorite_words",
}

var (
	// CollectionPrimaryKey and CollectionColumn2 are the table columns denoting the
	// primary key for the collection relation (M2M).
	CollectionPrimaryKey = []string{"collection_id", "word_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// SentenceValidator is a validator for the "sentence" field. It is called by the builders before save.
	SentenceValidator func(string) error
	// DurationValidator is a validator for the "duration" field. It is called by the builders before save.
	DurationValidator func(string) error
	// StartValidator is a validator for the "start" field. It is called by the builders before save.
	StartValidator func(string) error
	// EndValidator is a validator for the "end" field. It is called by the builders before save.
	EndValidator func(string) error
)
