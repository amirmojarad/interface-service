// Code generated by entc, DO NOT EDIT.

package word

import (
	"interface_project/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Meaning applies equality check predicate on the "meaning" field. It's identical to MeaningEQ.
func Meaning(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeaning), v))
	})
}

// IsPreposition applies equality check predicate on the "isPreposition" field. It's identical to IsPrepositionEQ.
func IsPreposition(v bool) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPreposition), v))
	})
}

// Sentence applies equality check predicate on the "sentence" field. It's identical to SentenceEQ.
func Sentence(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSentence), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStart), v))
	})
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnd), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// MeaningEQ applies the EQ predicate on the "meaning" field.
func MeaningEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeaning), v))
	})
}

// MeaningNEQ applies the NEQ predicate on the "meaning" field.
func MeaningNEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMeaning), v))
	})
}

// MeaningIn applies the In predicate on the "meaning" field.
func MeaningIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMeaning), v...))
	})
}

// MeaningNotIn applies the NotIn predicate on the "meaning" field.
func MeaningNotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMeaning), v...))
	})
}

// MeaningGT applies the GT predicate on the "meaning" field.
func MeaningGT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMeaning), v))
	})
}

// MeaningGTE applies the GTE predicate on the "meaning" field.
func MeaningGTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMeaning), v))
	})
}

// MeaningLT applies the LT predicate on the "meaning" field.
func MeaningLT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMeaning), v))
	})
}

// MeaningLTE applies the LTE predicate on the "meaning" field.
func MeaningLTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMeaning), v))
	})
}

// MeaningContains applies the Contains predicate on the "meaning" field.
func MeaningContains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMeaning), v))
	})
}

// MeaningHasPrefix applies the HasPrefix predicate on the "meaning" field.
func MeaningHasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMeaning), v))
	})
}

// MeaningHasSuffix applies the HasSuffix predicate on the "meaning" field.
func MeaningHasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMeaning), v))
	})
}

// MeaningEqualFold applies the EqualFold predicate on the "meaning" field.
func MeaningEqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMeaning), v))
	})
}

// MeaningContainsFold applies the ContainsFold predicate on the "meaning" field.
func MeaningContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMeaning), v))
	})
}

// IsPrepositionEQ applies the EQ predicate on the "isPreposition" field.
func IsPrepositionEQ(v bool) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPreposition), v))
	})
}

// IsPrepositionNEQ applies the NEQ predicate on the "isPreposition" field.
func IsPrepositionNEQ(v bool) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsPreposition), v))
	})
}

// SentenceEQ applies the EQ predicate on the "sentence" field.
func SentenceEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSentence), v))
	})
}

// SentenceNEQ applies the NEQ predicate on the "sentence" field.
func SentenceNEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSentence), v))
	})
}

// SentenceIn applies the In predicate on the "sentence" field.
func SentenceIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSentence), v...))
	})
}

// SentenceNotIn applies the NotIn predicate on the "sentence" field.
func SentenceNotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSentence), v...))
	})
}

// SentenceGT applies the GT predicate on the "sentence" field.
func SentenceGT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSentence), v))
	})
}

// SentenceGTE applies the GTE predicate on the "sentence" field.
func SentenceGTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSentence), v))
	})
}

// SentenceLT applies the LT predicate on the "sentence" field.
func SentenceLT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSentence), v))
	})
}

// SentenceLTE applies the LTE predicate on the "sentence" field.
func SentenceLTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSentence), v))
	})
}

// SentenceContains applies the Contains predicate on the "sentence" field.
func SentenceContains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSentence), v))
	})
}

// SentenceHasPrefix applies the HasPrefix predicate on the "sentence" field.
func SentenceHasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSentence), v))
	})
}

// SentenceHasSuffix applies the HasSuffix predicate on the "sentence" field.
func SentenceHasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSentence), v))
	})
}

// SentenceEqualFold applies the EqualFold predicate on the "sentence" field.
func SentenceEqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSentence), v))
	})
}

// SentenceContainsFold applies the ContainsFold predicate on the "sentence" field.
func SentenceContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSentence), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// DurationContains applies the Contains predicate on the "duration" field.
func DurationContains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDuration), v))
	})
}

// DurationHasPrefix applies the HasPrefix predicate on the "duration" field.
func DurationHasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDuration), v))
	})
}

// DurationHasSuffix applies the HasSuffix predicate on the "duration" field.
func DurationHasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDuration), v))
	})
}

// DurationEqualFold applies the EqualFold predicate on the "duration" field.
func DurationEqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDuration), v))
	})
}

// DurationContainsFold applies the ContainsFold predicate on the "duration" field.
func DurationContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDuration), v))
	})
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStart), v))
	})
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStart), v))
	})
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStart), v...))
	})
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStart), v...))
	})
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStart), v))
	})
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStart), v))
	})
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStart), v))
	})
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStart), v))
	})
}

// StartContains applies the Contains predicate on the "start" field.
func StartContains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStart), v))
	})
}

// StartHasPrefix applies the HasPrefix predicate on the "start" field.
func StartHasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStart), v))
	})
}

// StartHasSuffix applies the HasSuffix predicate on the "start" field.
func StartHasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStart), v))
	})
}

// StartEqualFold applies the EqualFold predicate on the "start" field.
func StartEqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStart), v))
	})
}

// StartContainsFold applies the ContainsFold predicate on the "start" field.
func StartContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStart), v))
	})
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnd), v))
	})
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnd), v))
	})
}

// EndIn applies the In predicate on the "end" field.
func EndIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnd), v...))
	})
}

// EndNotIn applies the NotIn predicate on the "end" field.
func EndNotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnd), v...))
	})
}

// EndGT applies the GT predicate on the "end" field.
func EndGT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnd), v))
	})
}

// EndGTE applies the GTE predicate on the "end" field.
func EndGTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnd), v))
	})
}

// EndLT applies the LT predicate on the "end" field.
func EndLT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnd), v))
	})
}

// EndLTE applies the LTE predicate on the "end" field.
func EndLTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnd), v))
	})
}

// EndContains applies the Contains predicate on the "end" field.
func EndContains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEnd), v))
	})
}

// EndHasPrefix applies the HasPrefix predicate on the "end" field.
func EndHasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEnd), v))
	})
}

// EndHasSuffix applies the HasSuffix predicate on the "end" field.
func EndHasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEnd), v))
	})
}

// EndEqualFold applies the EqualFold predicate on the "end" field.
func EndEqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEnd), v))
	})
}

// EndContainsFold applies the ContainsFold predicate on the "end" field.
func EndContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEnd), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FileTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.FileEntity) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FileInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCollection applies the HasEdge predicate on the "collection" edge.
func HasCollection() predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CollectionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CollectionTable, CollectionPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCollectionWith applies the HasEdge predicate on the "collection" edge with a given conditions (other predicates).
func HasCollectionWith(preds ...predicate.Collection) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CollectionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CollectionTable, CollectionPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Word) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Word) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Word) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		p(s.Not())
	})
}
