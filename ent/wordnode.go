// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"interface_project/ent/movie"
	"interface_project/ent/wordnode"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// WordNode is the model entity for the WordNode schema.
type WordNode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// IsPreposition holds the value of the "is_preposition" field.
	IsPreposition bool `json:"is_preposition,omitempty"`
	// Occurence holds the value of the "occurence" field.
	Occurence int `json:"occurence,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WordNodeQuery when eager-loading is set.
	Edges WordNodeEdges `json:"edges"`
}

// WordNodeEdges holds the relations/edges for other nodes in the graph.
type WordNodeEdges struct {
	// Words holds the value of the words edge.
	Words []*Word `json:"words,omitempty"`
	// MovieWordnode holds the value of the movie_wordnode edge.
	MovieWordnode *Movie `json:"movie_wordnode,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WordsOrErr returns the Words value or an error if the edge
// was not loaded in eager-loading.
func (e WordNodeEdges) WordsOrErr() ([]*Word, error) {
	if e.loadedTypes[0] {
		return e.Words, nil
	}
	return nil, &NotLoadedError{edge: "words"}
}

// MovieWordnodeOrErr returns the MovieWordnode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WordNodeEdges) MovieWordnodeOrErr() (*Movie, error) {
	if e.loadedTypes[1] {
		if e.MovieWordnode == nil {
			// The edge movie_wordnode was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: movie.Label}
		}
		return e.MovieWordnode, nil
	}
	return nil, &NotLoadedError{edge: "movie_wordnode"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WordNode) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case wordnode.FieldIsPreposition:
			values[i] = new(sql.NullBool)
		case wordnode.FieldID, wordnode.FieldOccurence:
			values[i] = new(sql.NullInt64)
		case wordnode.FieldTitle:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WordNode", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WordNode fields.
func (wn *WordNode) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wordnode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wn.ID = int(value.Int64)
		case wordnode.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				wn.Title = value.String
			}
		case wordnode.FieldIsPreposition:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_preposition", values[i])
			} else if value.Valid {
				wn.IsPreposition = value.Bool
			}
		case wordnode.FieldOccurence:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field occurence", values[i])
			} else if value.Valid {
				wn.Occurence = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryWords queries the "words" edge of the WordNode entity.
func (wn *WordNode) QueryWords() *WordQuery {
	return (&WordNodeClient{config: wn.config}).QueryWords(wn)
}

// QueryMovieWordnode queries the "movie_wordnode" edge of the WordNode entity.
func (wn *WordNode) QueryMovieWordnode() *MovieQuery {
	return (&WordNodeClient{config: wn.config}).QueryMovieWordnode(wn)
}

// Update returns a builder for updating this WordNode.
// Note that you need to call WordNode.Unwrap() before calling this method if this WordNode
// was returned from a transaction, and the transaction was committed or rolled back.
func (wn *WordNode) Update() *WordNodeUpdateOne {
	return (&WordNodeClient{config: wn.config}).UpdateOne(wn)
}

// Unwrap unwraps the WordNode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wn *WordNode) Unwrap() *WordNode {
	tx, ok := wn.config.driver.(*txDriver)
	if !ok {
		panic("ent: WordNode is not a transactional entity")
	}
	wn.config.driver = tx.drv
	return wn
}

// String implements the fmt.Stringer.
func (wn *WordNode) String() string {
	var builder strings.Builder
	builder.WriteString("WordNode(")
	builder.WriteString(fmt.Sprintf("id=%v", wn.ID))
	builder.WriteString(", title=")
	builder.WriteString(wn.Title)
	builder.WriteString(", is_preposition=")
	builder.WriteString(fmt.Sprintf("%v", wn.IsPreposition))
	builder.WriteString(", occurence=")
	builder.WriteString(fmt.Sprintf("%v", wn.Occurence))
	builder.WriteByte(')')
	return builder.String()
}

// WordNodes is a parsable slice of WordNode.
type WordNodes []*WordNode

func (wn WordNodes) config(cfg config) {
	for _i := range wn {
		wn[_i].config = cfg
	}
}
