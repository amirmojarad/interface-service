// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"interface_project/ent/predicate"
	"interface_project/ent/searchkeyword"
	"interface_project/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SearchKeywordUpdate is the builder for updating SearchKeyword entities.
type SearchKeywordUpdate struct {
	config
	hooks    []Hook
	mutation *SearchKeywordMutation
}

// Where appends a list predicates to the SearchKeywordUpdate builder.
func (sku *SearchKeywordUpdate) Where(ps ...predicate.SearchKeyword) *SearchKeywordUpdate {
	sku.mutation.Where(ps...)
	return sku
}

// SetTitle sets the "title" field.
func (sku *SearchKeywordUpdate) SetTitle(s string) *SearchKeywordUpdate {
	sku.mutation.SetTitle(s)
	return sku
}

// SetRate sets the "rate" field.
func (sku *SearchKeywordUpdate) SetRate(u uint16) *SearchKeywordUpdate {
	sku.mutation.ResetRate()
	sku.mutation.SetRate(u)
	return sku
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (sku *SearchKeywordUpdate) SetNillableRate(u *uint16) *SearchKeywordUpdate {
	if u != nil {
		sku.SetRate(*u)
	}
	return sku
}

// AddRate adds u to the "rate" field.
func (sku *SearchKeywordUpdate) AddRate(u int16) *SearchKeywordUpdate {
	sku.mutation.AddRate(u)
	return sku
}

// SetUserID sets the "user" edge to the User entity by ID.
func (sku *SearchKeywordUpdate) SetUserID(id int) *SearchKeywordUpdate {
	sku.mutation.SetUserID(id)
	return sku
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (sku *SearchKeywordUpdate) SetNillableUserID(id *int) *SearchKeywordUpdate {
	if id != nil {
		sku = sku.SetUserID(*id)
	}
	return sku
}

// SetUser sets the "user" edge to the User entity.
func (sku *SearchKeywordUpdate) SetUser(u *User) *SearchKeywordUpdate {
	return sku.SetUserID(u.ID)
}

// Mutation returns the SearchKeywordMutation object of the builder.
func (sku *SearchKeywordUpdate) Mutation() *SearchKeywordMutation {
	return sku.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (sku *SearchKeywordUpdate) ClearUser() *SearchKeywordUpdate {
	sku.mutation.ClearUser()
	return sku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sku *SearchKeywordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sku.hooks) == 0 {
		if err = sku.check(); err != nil {
			return 0, err
		}
		affected, err = sku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SearchKeywordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sku.check(); err != nil {
				return 0, err
			}
			sku.mutation = mutation
			affected, err = sku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sku.hooks) - 1; i >= 0; i-- {
			if sku.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sku *SearchKeywordUpdate) SaveX(ctx context.Context) int {
	affected, err := sku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sku *SearchKeywordUpdate) Exec(ctx context.Context) error {
	_, err := sku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sku *SearchKeywordUpdate) ExecX(ctx context.Context) {
	if err := sku.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sku *SearchKeywordUpdate) check() error {
	if v, ok := sku.mutation.Title(); ok {
		if err := searchkeyword.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "SearchKeyword.title": %w`, err)}
		}
	}
	return nil
}

func (sku *SearchKeywordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   searchkeyword.Table,
			Columns: searchkeyword.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: searchkeyword.FieldID,
			},
		},
	}
	if ps := sku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sku.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: searchkeyword.FieldTitle,
		})
	}
	if value, ok := sku.mutation.Rate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  value,
			Column: searchkeyword.FieldRate,
		})
	}
	if value, ok := sku.mutation.AddedRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  value,
			Column: searchkeyword.FieldRate,
		})
	}
	if sku.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   searchkeyword.UserTable,
			Columns: []string{searchkeyword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sku.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   searchkeyword.UserTable,
			Columns: []string{searchkeyword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{searchkeyword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SearchKeywordUpdateOne is the builder for updating a single SearchKeyword entity.
type SearchKeywordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SearchKeywordMutation
}

// SetTitle sets the "title" field.
func (skuo *SearchKeywordUpdateOne) SetTitle(s string) *SearchKeywordUpdateOne {
	skuo.mutation.SetTitle(s)
	return skuo
}

// SetRate sets the "rate" field.
func (skuo *SearchKeywordUpdateOne) SetRate(u uint16) *SearchKeywordUpdateOne {
	skuo.mutation.ResetRate()
	skuo.mutation.SetRate(u)
	return skuo
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (skuo *SearchKeywordUpdateOne) SetNillableRate(u *uint16) *SearchKeywordUpdateOne {
	if u != nil {
		skuo.SetRate(*u)
	}
	return skuo
}

// AddRate adds u to the "rate" field.
func (skuo *SearchKeywordUpdateOne) AddRate(u int16) *SearchKeywordUpdateOne {
	skuo.mutation.AddRate(u)
	return skuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (skuo *SearchKeywordUpdateOne) SetUserID(id int) *SearchKeywordUpdateOne {
	skuo.mutation.SetUserID(id)
	return skuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (skuo *SearchKeywordUpdateOne) SetNillableUserID(id *int) *SearchKeywordUpdateOne {
	if id != nil {
		skuo = skuo.SetUserID(*id)
	}
	return skuo
}

// SetUser sets the "user" edge to the User entity.
func (skuo *SearchKeywordUpdateOne) SetUser(u *User) *SearchKeywordUpdateOne {
	return skuo.SetUserID(u.ID)
}

// Mutation returns the SearchKeywordMutation object of the builder.
func (skuo *SearchKeywordUpdateOne) Mutation() *SearchKeywordMutation {
	return skuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (skuo *SearchKeywordUpdateOne) ClearUser() *SearchKeywordUpdateOne {
	skuo.mutation.ClearUser()
	return skuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (skuo *SearchKeywordUpdateOne) Select(field string, fields ...string) *SearchKeywordUpdateOne {
	skuo.fields = append([]string{field}, fields...)
	return skuo
}

// Save executes the query and returns the updated SearchKeyword entity.
func (skuo *SearchKeywordUpdateOne) Save(ctx context.Context) (*SearchKeyword, error) {
	var (
		err  error
		node *SearchKeyword
	)
	if len(skuo.hooks) == 0 {
		if err = skuo.check(); err != nil {
			return nil, err
		}
		node, err = skuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SearchKeywordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = skuo.check(); err != nil {
				return nil, err
			}
			skuo.mutation = mutation
			node, err = skuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(skuo.hooks) - 1; i >= 0; i-- {
			if skuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = skuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, skuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (skuo *SearchKeywordUpdateOne) SaveX(ctx context.Context) *SearchKeyword {
	node, err := skuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (skuo *SearchKeywordUpdateOne) Exec(ctx context.Context) error {
	_, err := skuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (skuo *SearchKeywordUpdateOne) ExecX(ctx context.Context) {
	if err := skuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (skuo *SearchKeywordUpdateOne) check() error {
	if v, ok := skuo.mutation.Title(); ok {
		if err := searchkeyword.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "SearchKeyword.title": %w`, err)}
		}
	}
	return nil
}

func (skuo *SearchKeywordUpdateOne) sqlSave(ctx context.Context) (_node *SearchKeyword, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   searchkeyword.Table,
			Columns: searchkeyword.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: searchkeyword.FieldID,
			},
		},
	}
	id, ok := skuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SearchKeyword.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := skuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, searchkeyword.FieldID)
		for _, f := range fields {
			if !searchkeyword.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != searchkeyword.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := skuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := skuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: searchkeyword.FieldTitle,
		})
	}
	if value, ok := skuo.mutation.Rate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  value,
			Column: searchkeyword.FieldRate,
		})
	}
	if value, ok := skuo.mutation.AddedRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  value,
			Column: searchkeyword.FieldRate,
		})
	}
	if skuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   searchkeyword.UserTable,
			Columns: []string{searchkeyword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := skuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   searchkeyword.UserTable,
			Columns: []string{searchkeyword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SearchKeyword{config: skuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, skuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{searchkeyword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
