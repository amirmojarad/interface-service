// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"interface_project/ent/movie"
	"interface_project/ent/wordnode"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Movie is the model entity for the Movie schema.
type Movie struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Year holds the value of the "year" field.
	Year string `json:"year,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// RuntimeStr holds the value of the "runtimeStr" field.
	RuntimeStr string `json:"runtimeStr,omitempty"`
	// Genres holds the value of the "genres" field.
	Genres string `json:"genres,omitempty"`
	// ImDbRating holds the value of the "imDbRating" field.
	ImDbRating string `json:"imDbRating,omitempty"`
	// Plot holds the value of the "plot" field.
	Plot string `json:"plot,omitempty"`
	// Stars holds the value of the "stars" field.
	Stars string `json:"stars,omitempty"`
	// MetacriticRating holds the value of the "metacriticRating" field.
	MetacriticRating string `json:"metacriticRating,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MovieQuery when eager-loading is set.
	Edges                    MovieEdges `json:"edges"`
	word_node_movie_wordnode *int
}

// MovieEdges holds the relations/edges for other nodes in the graph.
type MovieEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// WordNodes holds the value of the word_nodes edge.
	WordNodes *WordNode `json:"word_nodes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e MovieEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// WordNodesOrErr returns the WordNodes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MovieEdges) WordNodesOrErr() (*WordNode, error) {
	if e.loadedTypes[1] {
		if e.WordNodes == nil {
			// The edge word_nodes was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: wordnode.Label}
		}
		return e.WordNodes, nil
	}
	return nil, &NotLoadedError{edge: "word_nodes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Movie) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case movie.FieldID:
			values[i] = new(sql.NullInt64)
		case movie.FieldTitle, movie.FieldYear, movie.FieldImageURL, movie.FieldRuntimeStr, movie.FieldGenres, movie.FieldImDbRating, movie.FieldPlot, movie.FieldStars, movie.FieldMetacriticRating:
			values[i] = new(sql.NullString)
		case movie.ForeignKeys[0]: // word_node_movie_wordnode
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Movie", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Movie fields.
func (m *Movie) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case movie.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case movie.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = value.String
			}
		case movie.FieldYear:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				m.Year = value.String
			}
		case movie.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				m.ImageURL = value.String
			}
		case movie.FieldRuntimeStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field runtimeStr", values[i])
			} else if value.Valid {
				m.RuntimeStr = value.String
			}
		case movie.FieldGenres:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field genres", values[i])
			} else if value.Valid {
				m.Genres = value.String
			}
		case movie.FieldImDbRating:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imDbRating", values[i])
			} else if value.Valid {
				m.ImDbRating = value.String
			}
		case movie.FieldPlot:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plot", values[i])
			} else if value.Valid {
				m.Plot = value.String
			}
		case movie.FieldStars:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stars", values[i])
			} else if value.Valid {
				m.Stars = value.String
			}
		case movie.FieldMetacriticRating:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metacriticRating", values[i])
			} else if value.Valid {
				m.MetacriticRating = value.String
			}
		case movie.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field word_node_movie_wordnode", value)
			} else if value.Valid {
				m.word_node_movie_wordnode = new(int)
				*m.word_node_movie_wordnode = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUsers queries the "users" edge of the Movie entity.
func (m *Movie) QueryUsers() *UserQuery {
	return (&MovieClient{config: m.config}).QueryUsers(m)
}

// QueryWordNodes queries the "word_nodes" edge of the Movie entity.
func (m *Movie) QueryWordNodes() *WordNodeQuery {
	return (&MovieClient{config: m.config}).QueryWordNodes(m)
}

// Update returns a builder for updating this Movie.
// Note that you need to call Movie.Unwrap() before calling this method if this Movie
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Movie) Update() *MovieUpdateOne {
	return (&MovieClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Movie entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Movie) Unwrap() *Movie {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Movie is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Movie) String() string {
	var builder strings.Builder
	builder.WriteString("Movie(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", title=")
	builder.WriteString(m.Title)
	builder.WriteString(", year=")
	builder.WriteString(m.Year)
	builder.WriteString(", image_url=")
	builder.WriteString(m.ImageURL)
	builder.WriteString(", runtimeStr=")
	builder.WriteString(m.RuntimeStr)
	builder.WriteString(", genres=")
	builder.WriteString(m.Genres)
	builder.WriteString(", imDbRating=")
	builder.WriteString(m.ImDbRating)
	builder.WriteString(", plot=")
	builder.WriteString(m.Plot)
	builder.WriteString(", stars=")
	builder.WriteString(m.Stars)
	builder.WriteString(", metacriticRating=")
	builder.WriteString(m.MetacriticRating)
	builder.WriteByte(')')
	return builder.String()
}

// Movies is a parsable slice of Movie.
type Movies []*Movie

func (m Movies) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
