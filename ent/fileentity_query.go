// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"interface_project/ent/fileentity"
	"interface_project/ent/predicate"
	"interface_project/ent/user"
	"interface_project/ent/word"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileEntityQuery is the builder for querying FileEntity entities.
type FileEntityQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.FileEntity
	// eager-loading edges.
	withOwner *UserQuery
	withWords *WordQuery
	withFKs   bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FileEntityQuery builder.
func (feq *FileEntityQuery) Where(ps ...predicate.FileEntity) *FileEntityQuery {
	feq.predicates = append(feq.predicates, ps...)
	return feq
}

// Limit adds a limit step to the query.
func (feq *FileEntityQuery) Limit(limit int) *FileEntityQuery {
	feq.limit = &limit
	return feq
}

// Offset adds an offset step to the query.
func (feq *FileEntityQuery) Offset(offset int) *FileEntityQuery {
	feq.offset = &offset
	return feq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (feq *FileEntityQuery) Unique(unique bool) *FileEntityQuery {
	feq.unique = &unique
	return feq
}

// Order adds an order step to the query.
func (feq *FileEntityQuery) Order(o ...OrderFunc) *FileEntityQuery {
	feq.order = append(feq.order, o...)
	return feq
}

// QueryOwner chains the current query on the "owner" edge.
func (feq *FileEntityQuery) QueryOwner() *UserQuery {
	query := &UserQuery{config: feq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := feq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := feq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fileentity.Table, fileentity.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fileentity.OwnerTable, fileentity.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(feq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWords chains the current query on the "words" edge.
func (feq *FileEntityQuery) QueryWords() *WordQuery {
	query := &WordQuery{config: feq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := feq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := feq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fileentity.Table, fileentity.FieldID, selector),
			sqlgraph.To(word.Table, word.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fileentity.WordsTable, fileentity.WordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(feq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FileEntity entity from the query.
// Returns a *NotFoundError when no FileEntity was found.
func (feq *FileEntityQuery) First(ctx context.Context) (*FileEntity, error) {
	nodes, err := feq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{fileentity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (feq *FileEntityQuery) FirstX(ctx context.Context) *FileEntity {
	node, err := feq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FileEntity ID from the query.
// Returns a *NotFoundError when no FileEntity ID was found.
func (feq *FileEntityQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = feq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{fileentity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (feq *FileEntityQuery) FirstIDX(ctx context.Context) int {
	id, err := feq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FileEntity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FileEntity entity is found.
// Returns a *NotFoundError when no FileEntity entities are found.
func (feq *FileEntityQuery) Only(ctx context.Context) (*FileEntity, error) {
	nodes, err := feq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{fileentity.Label}
	default:
		return nil, &NotSingularError{fileentity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (feq *FileEntityQuery) OnlyX(ctx context.Context) *FileEntity {
	node, err := feq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FileEntity ID in the query.
// Returns a *NotSingularError when more than one FileEntity ID is found.
// Returns a *NotFoundError when no entities are found.
func (feq *FileEntityQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = feq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{fileentity.Label}
	default:
		err = &NotSingularError{fileentity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (feq *FileEntityQuery) OnlyIDX(ctx context.Context) int {
	id, err := feq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FileEntities.
func (feq *FileEntityQuery) All(ctx context.Context) ([]*FileEntity, error) {
	if err := feq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return feq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (feq *FileEntityQuery) AllX(ctx context.Context) []*FileEntity {
	nodes, err := feq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FileEntity IDs.
func (feq *FileEntityQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := feq.Select(fileentity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (feq *FileEntityQuery) IDsX(ctx context.Context) []int {
	ids, err := feq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (feq *FileEntityQuery) Count(ctx context.Context) (int, error) {
	if err := feq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return feq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (feq *FileEntityQuery) CountX(ctx context.Context) int {
	count, err := feq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (feq *FileEntityQuery) Exist(ctx context.Context) (bool, error) {
	if err := feq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return feq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (feq *FileEntityQuery) ExistX(ctx context.Context) bool {
	exist, err := feq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FileEntityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (feq *FileEntityQuery) Clone() *FileEntityQuery {
	if feq == nil {
		return nil
	}
	return &FileEntityQuery{
		config:     feq.config,
		limit:      feq.limit,
		offset:     feq.offset,
		order:      append([]OrderFunc{}, feq.order...),
		predicates: append([]predicate.FileEntity{}, feq.predicates...),
		withOwner:  feq.withOwner.Clone(),
		withWords:  feq.withWords.Clone(),
		// clone intermediate query.
		sql:    feq.sql.Clone(),
		path:   feq.path,
		unique: feq.unique,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (feq *FileEntityQuery) WithOwner(opts ...func(*UserQuery)) *FileEntityQuery {
	query := &UserQuery{config: feq.config}
	for _, opt := range opts {
		opt(query)
	}
	feq.withOwner = query
	return feq
}

// WithWords tells the query-builder to eager-load the nodes that are connected to
// the "words" edge. The optional arguments are used to configure the query builder of the edge.
func (feq *FileEntityQuery) WithWords(opts ...func(*WordQuery)) *FileEntityQuery {
	query := &WordQuery{config: feq.config}
	for _, opt := range opts {
		opt(query)
	}
	feq.withWords = query
	return feq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Path string `json:"path,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FileEntity.Query().
//		GroupBy(fileentity.FieldPath).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (feq *FileEntityQuery) GroupBy(field string, fields ...string) *FileEntityGroupBy {
	group := &FileEntityGroupBy{config: feq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := feq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return feq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Path string `json:"path,omitempty"`
//	}
//
//	client.FileEntity.Query().
//		Select(fileentity.FieldPath).
//		Scan(ctx, &v)
//
func (feq *FileEntityQuery) Select(fields ...string) *FileEntitySelect {
	feq.fields = append(feq.fields, fields...)
	return &FileEntitySelect{FileEntityQuery: feq}
}

func (feq *FileEntityQuery) prepareQuery(ctx context.Context) error {
	for _, f := range feq.fields {
		if !fileentity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if feq.path != nil {
		prev, err := feq.path(ctx)
		if err != nil {
			return err
		}
		feq.sql = prev
	}
	return nil
}

func (feq *FileEntityQuery) sqlAll(ctx context.Context) ([]*FileEntity, error) {
	var (
		nodes       = []*FileEntity{}
		withFKs     = feq.withFKs
		_spec       = feq.querySpec()
		loadedTypes = [2]bool{
			feq.withOwner != nil,
			feq.withWords != nil,
		}
	)
	if feq.withOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, fileentity.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &FileEntity{config: feq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, feq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := feq.withOwner; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*FileEntity)
		for i := range nodes {
			if nodes[i].user_files == nil {
				continue
			}
			fk := *nodes[i].user_files
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_files" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Owner = n
			}
		}
	}

	if query := feq.withWords; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*FileEntity)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Words = []*Word{}
		}
		query.withFKs = true
		query.Where(predicate.Word(func(s *sql.Selector) {
			s.Where(sql.InValues(fileentity.WordsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.file_entity_words
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "file_entity_words" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "file_entity_words" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Words = append(node.Edges.Words, n)
		}
	}

	return nodes, nil
}

func (feq *FileEntityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := feq.querySpec()
	_spec.Node.Columns = feq.fields
	if len(feq.fields) > 0 {
		_spec.Unique = feq.unique != nil && *feq.unique
	}
	return sqlgraph.CountNodes(ctx, feq.driver, _spec)
}

func (feq *FileEntityQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := feq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (feq *FileEntityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fileentity.Table,
			Columns: fileentity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fileentity.FieldID,
			},
		},
		From:   feq.sql,
		Unique: true,
	}
	if unique := feq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := feq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fileentity.FieldID)
		for i := range fields {
			if fields[i] != fileentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := feq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := feq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := feq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := feq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (feq *FileEntityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(feq.driver.Dialect())
	t1 := builder.Table(fileentity.Table)
	columns := feq.fields
	if len(columns) == 0 {
		columns = fileentity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if feq.sql != nil {
		selector = feq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if feq.unique != nil && *feq.unique {
		selector.Distinct()
	}
	for _, p := range feq.predicates {
		p(selector)
	}
	for _, p := range feq.order {
		p(selector)
	}
	if offset := feq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := feq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FileEntityGroupBy is the group-by builder for FileEntity entities.
type FileEntityGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fegb *FileEntityGroupBy) Aggregate(fns ...AggregateFunc) *FileEntityGroupBy {
	fegb.fns = append(fegb.fns, fns...)
	return fegb
}

// Scan applies the group-by query and scans the result into the given value.
func (fegb *FileEntityGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := fegb.path(ctx)
	if err != nil {
		return err
	}
	fegb.sql = query
	return fegb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (fegb *FileEntityGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := fegb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (fegb *FileEntityGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(fegb.fields) > 1 {
		return nil, errors.New("ent: FileEntityGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := fegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (fegb *FileEntityGroupBy) StringsX(ctx context.Context) []string {
	v, err := fegb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (fegb *FileEntityGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = fegb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fileentity.Label}
	default:
		err = fmt.Errorf("ent: FileEntityGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (fegb *FileEntityGroupBy) StringX(ctx context.Context) string {
	v, err := fegb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (fegb *FileEntityGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(fegb.fields) > 1 {
		return nil, errors.New("ent: FileEntityGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := fegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (fegb *FileEntityGroupBy) IntsX(ctx context.Context) []int {
	v, err := fegb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (fegb *FileEntityGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = fegb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fileentity.Label}
	default:
		err = fmt.Errorf("ent: FileEntityGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (fegb *FileEntityGroupBy) IntX(ctx context.Context) int {
	v, err := fegb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (fegb *FileEntityGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(fegb.fields) > 1 {
		return nil, errors.New("ent: FileEntityGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := fegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (fegb *FileEntityGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := fegb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (fegb *FileEntityGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = fegb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fileentity.Label}
	default:
		err = fmt.Errorf("ent: FileEntityGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (fegb *FileEntityGroupBy) Float64X(ctx context.Context) float64 {
	v, err := fegb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (fegb *FileEntityGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(fegb.fields) > 1 {
		return nil, errors.New("ent: FileEntityGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := fegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (fegb *FileEntityGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := fegb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (fegb *FileEntityGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = fegb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fileentity.Label}
	default:
		err = fmt.Errorf("ent: FileEntityGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (fegb *FileEntityGroupBy) BoolX(ctx context.Context) bool {
	v, err := fegb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fegb *FileEntityGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range fegb.fields {
		if !fileentity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := fegb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fegb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (fegb *FileEntityGroupBy) sqlQuery() *sql.Selector {
	selector := fegb.sql.Select()
	aggregation := make([]string, 0, len(fegb.fns))
	for _, fn := range fegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(fegb.fields)+len(fegb.fns))
		for _, f := range fegb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(fegb.fields...)...)
}

// FileEntitySelect is the builder for selecting fields of FileEntity entities.
type FileEntitySelect struct {
	*FileEntityQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (fes *FileEntitySelect) Scan(ctx context.Context, v interface{}) error {
	if err := fes.prepareQuery(ctx); err != nil {
		return err
	}
	fes.sql = fes.FileEntityQuery.sqlQuery(ctx)
	return fes.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (fes *FileEntitySelect) ScanX(ctx context.Context, v interface{}) {
	if err := fes.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (fes *FileEntitySelect) Strings(ctx context.Context) ([]string, error) {
	if len(fes.fields) > 1 {
		return nil, errors.New("ent: FileEntitySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := fes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (fes *FileEntitySelect) StringsX(ctx context.Context) []string {
	v, err := fes.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (fes *FileEntitySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = fes.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fileentity.Label}
	default:
		err = fmt.Errorf("ent: FileEntitySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (fes *FileEntitySelect) StringX(ctx context.Context) string {
	v, err := fes.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (fes *FileEntitySelect) Ints(ctx context.Context) ([]int, error) {
	if len(fes.fields) > 1 {
		return nil, errors.New("ent: FileEntitySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := fes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (fes *FileEntitySelect) IntsX(ctx context.Context) []int {
	v, err := fes.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (fes *FileEntitySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = fes.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fileentity.Label}
	default:
		err = fmt.Errorf("ent: FileEntitySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (fes *FileEntitySelect) IntX(ctx context.Context) int {
	v, err := fes.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (fes *FileEntitySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(fes.fields) > 1 {
		return nil, errors.New("ent: FileEntitySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := fes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (fes *FileEntitySelect) Float64sX(ctx context.Context) []float64 {
	v, err := fes.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (fes *FileEntitySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = fes.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fileentity.Label}
	default:
		err = fmt.Errorf("ent: FileEntitySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (fes *FileEntitySelect) Float64X(ctx context.Context) float64 {
	v, err := fes.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (fes *FileEntitySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(fes.fields) > 1 {
		return nil, errors.New("ent: FileEntitySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := fes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (fes *FileEntitySelect) BoolsX(ctx context.Context) []bool {
	v, err := fes.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (fes *FileEntitySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = fes.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fileentity.Label}
	default:
		err = fmt.Errorf("ent: FileEntitySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (fes *FileEntitySelect) BoolX(ctx context.Context) bool {
	v, err := fes.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fes *FileEntitySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := fes.sql.Query()
	if err := fes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
