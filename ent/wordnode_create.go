// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"interface_project/ent/fileentity"
	"interface_project/ent/word"
	"interface_project/ent/wordnode"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WordNodeCreate is the builder for creating a WordNode entity.
type WordNodeCreate struct {
	config
	mutation *WordNodeMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (wnc *WordNodeCreate) SetTitle(s string) *WordNodeCreate {
	wnc.mutation.SetTitle(s)
	return wnc
}

// SetIsPreposition sets the "is_preposition" field.
func (wnc *WordNodeCreate) SetIsPreposition(b bool) *WordNodeCreate {
	wnc.mutation.SetIsPreposition(b)
	return wnc
}

// SetOccurence sets the "occurence" field.
func (wnc *WordNodeCreate) SetOccurence(i int) *WordNodeCreate {
	wnc.mutation.SetOccurence(i)
	return wnc
}

// SetNillableOccurence sets the "occurence" field if the given value is not nil.
func (wnc *WordNodeCreate) SetNillableOccurence(i *int) *WordNodeCreate {
	if i != nil {
		wnc.SetOccurence(*i)
	}
	return wnc
}

// AddWordIDs adds the "words" edge to the Word entity by IDs.
func (wnc *WordNodeCreate) AddWordIDs(ids ...int) *WordNodeCreate {
	wnc.mutation.AddWordIDs(ids...)
	return wnc
}

// AddWords adds the "words" edges to the Word entity.
func (wnc *WordNodeCreate) AddWords(w ...*Word) *WordNodeCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wnc.AddWordIDs(ids...)
}

// SetFileID sets the "file" edge to the FileEntity entity by ID.
func (wnc *WordNodeCreate) SetFileID(id int) *WordNodeCreate {
	wnc.mutation.SetFileID(id)
	return wnc
}

// SetFile sets the "file" edge to the FileEntity entity.
func (wnc *WordNodeCreate) SetFile(f *FileEntity) *WordNodeCreate {
	return wnc.SetFileID(f.ID)
}

// Mutation returns the WordNodeMutation object of the builder.
func (wnc *WordNodeCreate) Mutation() *WordNodeMutation {
	return wnc.mutation
}

// Save creates the WordNode in the database.
func (wnc *WordNodeCreate) Save(ctx context.Context) (*WordNode, error) {
	var (
		err  error
		node *WordNode
	)
	if len(wnc.hooks) == 0 {
		if err = wnc.check(); err != nil {
			return nil, err
		}
		node, err = wnc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WordNodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wnc.check(); err != nil {
				return nil, err
			}
			wnc.mutation = mutation
			if node, err = wnc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wnc.hooks) - 1; i >= 0; i-- {
			if wnc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wnc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wnc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wnc *WordNodeCreate) SaveX(ctx context.Context) *WordNode {
	v, err := wnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wnc *WordNodeCreate) Exec(ctx context.Context) error {
	_, err := wnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wnc *WordNodeCreate) ExecX(ctx context.Context) {
	if err := wnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wnc *WordNodeCreate) check() error {
	if _, ok := wnc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "WordNode.title"`)}
	}
	if v, ok := wnc.mutation.Title(); ok {
		if err := wordnode.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "WordNode.title": %w`, err)}
		}
	}
	if _, ok := wnc.mutation.IsPreposition(); !ok {
		return &ValidationError{Name: "is_preposition", err: errors.New(`ent: missing required field "WordNode.is_preposition"`)}
	}
	if _, ok := wnc.mutation.FileID(); !ok {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required edge "WordNode.file"`)}
	}
	return nil
}

func (wnc *WordNodeCreate) sqlSave(ctx context.Context) (*WordNode, error) {
	_node, _spec := wnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wnc *WordNodeCreate) createSpec() (*WordNode, *sqlgraph.CreateSpec) {
	var (
		_node = &WordNode{config: wnc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: wordnode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wordnode.FieldID,
			},
		}
	)
	if value, ok := wnc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wordnode.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := wnc.mutation.IsPreposition(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wordnode.FieldIsPreposition,
		})
		_node.IsPreposition = value
	}
	if value, ok := wnc.mutation.Occurence(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: wordnode.FieldOccurence,
		})
		_node.Occurence = value
	}
	if nodes := wnc.mutation.WordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wordnode.WordsTable,
			Columns: []string{wordnode.WordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: word.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wnc.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wordnode.FileTable,
			Columns: []string{wordnode.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileentity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.file_entity_wordnodes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WordNodeCreateBulk is the builder for creating many WordNode entities in bulk.
type WordNodeCreateBulk struct {
	config
	builders []*WordNodeCreate
}

// Save creates the WordNode entities in the database.
func (wncb *WordNodeCreateBulk) Save(ctx context.Context) ([]*WordNode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wncb.builders))
	nodes := make([]*WordNode, len(wncb.builders))
	mutators := make([]Mutator, len(wncb.builders))
	for i := range wncb.builders {
		func(i int, root context.Context) {
			builder := wncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WordNodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wncb *WordNodeCreateBulk) SaveX(ctx context.Context) []*WordNode {
	v, err := wncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wncb *WordNodeCreateBulk) Exec(ctx context.Context) error {
	_, err := wncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wncb *WordNodeCreateBulk) ExecX(ctx context.Context) {
	if err := wncb.Exec(ctx); err != nil {
		panic(err)
	}
}
